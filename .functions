# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@"
  }
fi

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}

# Get a character’s Unicode code point
function codepoint() {
  perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
  echo # newline
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
  for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
    xattr -r -d "$attribute" "$@"
  done
}

# Based on https://github.com/runeimp/dnsflush
MAJOR_MINOR_PATCH_RE='([0-9]+)\.([0-9]+)\.([0-9]+)(.*)'
MAJOR_MINOR_PATCH_BUILD_RE='([0-9]+)\.([0-9]+)\.([0-9]+).?([0-9A-z]+).?$'
mac_version()
{
  local tmp=$(type sw_vers 2>&1 /dev/null)
  if [[ $? = 0 ]]; then
    tmp="$(sw_vers -productVersion)"
    if [[ $tmp =~ $MAJOR_MINOR_PATCH_RE ]]; then
      local version_major="${BASH_REMATCH[1]}"
      local version_minor="${BASH_REMATCH[2]}"
    fi
  else
    tmp=$(system_profiler SPSoftwareDataType | grep 'System Version:' | awk '{print $5 $6}')
    if [[ "$tmp" =~ $MAJOR_MINOR_PATCH_BUILD_RE ]]; then
      local version_major="${BASH_REMATCH[1]}"
      local version_minor="${BASH_REMATCH[2]}"
    fi
  fi

  echo "$version_major.$version_minor"
}

# Based on https://github.com/runeimp/dnsflush
# Requires `mac_version` (above).
UNKNOWN_VERSION_MAC=$(cat <<UNKNOWN_VERSION
  Don't know how to handle flushing the DNS cache of this version of OS X.
  This script is specifically setup to handle each version of OS X as Apple
  changes the mechanism often I do not even want to hazard a guess at how this
  version manages it's DNS cache.
UNKNOWN_VERSION
)
reset_dns() {
  local os_name=$(uname -s)
  if [[ "$os_name" != "Darwin" ]]; then
    echo "Unknown OS: $os_name"
    exit 1
  fi

  local version=$(mac_version)
  local major_version=`echo $version | cut -d. -f1`
  local minor_version=`echo $version | cut -d. -f2`
  if [[ $major_version = 10 ]]; then
      local dns_flushed=1
      case $minor_version in
        9 | 11) # Mavricks & El Capitan
          dscacheutil -flushcache
          sudo killall -HUP mDNSResponder
          dns_flushed=0
          ;;
        10) # Yosemite
          sudo discoveryutil mdnsflushcache
          sudo discoveryutil udnsflushcaches
          dns_flushed=0
          ;;
        7 | 8) # Lion & Mountain Lion
          sudo killall -HUP mDNSResponder
          dns_flushed=0
          ;;
        5 | 6) # Leopard & Snow Leopard
          dscacheutil -flushcache
          dns_flushed=0
          ;;
        1 | 2 | 3 | 4) # Cheetah, Puma, Panther, and Tiger
          lookupd -flushcache
          dns_flushed=0
          ;;
        *)
          echo "$UNKNOWN_VERSION_MAC"
          ;;
      esac

      if [[ $dns_flushed = 0 ]]; then
        echo "DNS cache flushed"
      else
        echo 'uh oh'
      fi
    fi
}
